=== Coleta: 2025-02-21 13:40:32 ===
import os import shutil from git import repo import tensorflow as tf from datetime import datetime  # configurações de usuário e repositório username = "dragonscpoficial" email = "fake-email@example.com" repo_dir = "teste_repo" github_token = "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"  # função para configurar usuário git def git_setup(repo):     with repo.config_writer() as cfg:         cfg.set_value("user", "name", username)         cfg.set_value("user", "email", email)  # função para adicionar, commitar e fazer push no repositório def git_push(repo, msg):     repo.git.add('--all')     repo.index.commit(msg)     repo.remote().push()     print(f"commit realizado: {msg}")  # carrega o histórico de perguntas e respostas de um arquivo def load_qa_history(file):     qa, current = {}, none     try:         with open(file) as f:             for line in f:                 line = line.strip()                 if line.startswith('p: '):                     current = line[3:]                 elif line.startswith('correção: ') and current:                     qa[current] = line[10:]                 elif line.startswith('r: ') and current and current not in qa:                     qa[current] = line[3:]     except filenotfounderror:         pass     return qa  # função para treinar o modelo mnist def train_model():     (x_train, y_train), _ = tf.keras.datasets.mnist.load_data()     x_train = x_train / 255.0      model = tf.keras.sequential([         tf.keras.input(shape=(28, 28)),         tf.keras.layers.flatten(),         tf.keras.layers.dense(128, activation='relu'),         tf.keras.layers.dense(10, activation='softmax')     ])      model.compile(optimizer='adam', loss='sparse_categorical_crossentropy', metrics=['accuracy'])     history = model.fit(x_train, y_train, epochs=1, verbose=0)      log = f"""treinamento: {datetime.now()} acurácia: {history.history['accuracy'][-1]:.2f} loss: {history.history['loss'][-1]:.2f}\n"""     with open("training_log.txt", "w") as f:         f.write(log)  # sessão de perguntas e respostas interativas def qa_interativa(repo):     qa_file = "qa_log.txt"     historico = load_qa_history(qa_file)      with open(qa_file, "a") as f:         f.write(f"\n=== sessão: {datetime.now().strftime('%y-%m-%d %h:%m:%s')} ===\n")      while (p := input("\npergunta ('sair' para sair): ").strip().lower()) != 'sair':         if p in historico:             print(f"resposta: {historico[p]}")             continue          resposta = "resposta padrão. valide ou corrija."         with open(qa_file, "a") as f:             f.write(f"p: {p}\nr: {resposta}\n")          valid = input(f"resposta: {resposta}\ncorreta? (s/n): ").lower()         if valid == 'n':             correcao = input("correção: ")             with open(qa_file, "a") as f:                 f.write(f"correção: {correcao}\n")             git_push(repo, f"correção: {p[:15]}...")             historico[p] = correcao         elif valid == 's':             git_push(repo, "q&a confirmado")             historico[p] = resposta  # função para coletar dados e salvar em novo arquivo def coletar_dados(repo):     dados_file = "dados_personalizados.txt"     print("\n--- coleta de dados e informações ---")     with open(dados_file, "a") as f:         f.write(f"=== coleta: {datetime.now().strftime('%y-%m-%d %h:%m:%s')} ===\n")         while (info := input("insira dados ('sair' para encerrar): ").strip().lower()) != 'sair':             f.write(f"{info}\n")     git_push(repo, "dados personalizados adicionados")     print("dados coletados e salvos com sucesso!")  # menu principal de seleção def menu_principal(repo):     while true:         print("\n--- menu principal ---")         print("1. iniciar treinamento e perguntas/respostas")         print("2. coletar dados e informações")         print("3. sair")          escolha = input("escolha uma opção: ")         if escolha == '1':             train_model()             git_push(repo, "atualização do modelo")             qa_interativa(repo)         elif escolha == '2':             coletar_dados(repo)         elif escolha == '3':             print("encerrando o programa...")             break         else:             print("opção inválida. tente novamente.")  # execução principal if __name__ == "__main__":     !pip install gitpython tensorflow --quiet      if os.path.exists(repo_dir):         shutil.rmtree(repo_dir)      repo = repo.clone_from(         f"https://{username}:{github_token}@github.com/{username}/teste.git",         repo_dir     )      git_setup(repo)     os.chdir(repo_dir)      menu_principal(repo)     print("processo concluído com sucesso!")
